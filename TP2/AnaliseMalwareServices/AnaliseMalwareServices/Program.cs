using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using AnaliseMalwareServices.Data;
using AnaliseMalwareServices.VirusTotalApi;
using Microsoft.OpenApi.Models;
using System.Reflection;
using AnaliseMalwareServices.WCF.Interfaces;
using AnaliseMalwareServices.WCF.Services;


namespace AnaliseMalwareServices
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            // Register VirusTotalApiClient as a singleton service
            builder.Services.AddSingleton<VirusTotalApiClient>(serviceProvider =>
            {
                var apiKey = builder.Configuration["VirusTotalApiKey"]; // Read the API key from the config
                return new VirusTotalApiClient(apiKey);
            });

            //JWT
            builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(options =>
                {
                    options.Authority = "https://localhost:7075";
                    options.Audience = "analise-malware-api";
                });

            //BD
            builder.Services.AddDbContext<ApiContext>(options =>
            {
                options.UseSqlServer(builder.Configuration.GetConnectionString("DatabaseConnection1"));
            });


            builder.Services.AddControllers();
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            //builder.Services.AddSwaggerGen();

            builder.Services.AddSwaggerGen(options =>
            {
                options.SwaggerDoc("v1", new OpenApiInfo { Title = "AnaliseMalware", Version = "v1" });
                options.AddSecurityDefinition(name: JwtBearerDefaults.AuthenticationScheme, new OpenApiSecurityScheme
                {
                    Name = "Authorization",
                    Description = "JWT Authorization header using the Bearer scheme: `Bearer Generated JWT-Token`",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer"
                });
                options.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = JwtBearerDefaults.AuthenticationScheme
                            }
                        },
                        new string[] { }
                    }
                });


                // Add support for XML comments
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                options.IncludeXmlComments(xmlPath);
            });


            var app = builder.Build();


            // Register your WCF service and interface
            //builder.Services.AddSingleton<IMyWcfService, MyWcfService>();

            // Enable logging
            builder.Logging.AddConsole(); // Add console logging

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            //builder.Services.AddCors(options =>
            //{
            //    options.AddPolicy("AllowAll",
            //        builder => builder.AllowAnyOrigin()
            //                          .AllowAnyMethod()
            //                          .AllowAnyHeader());
            //});


            builder.Services.AddLogging(config =>
            {
                config.AddConsole();
                config.AddDebug();
            });


            //app.UseCors("AllowAll");


            app.UseHttpsRedirection();

            app.UseAuthorization();


            app.MapControllers();



            app.UseSwagger();
            app.UseSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "AnaliseMalware v1");
                options.RoutePrefix = string.Empty; // Set the Swagger UI at the root URL
            });



            //// Create a WCF service host to host the WCF service
            //var serviceHost = new ServiceHost(typeof(MyWcfService));
            //serviceHost.Open();

            //// Map the WCF endpoint
            //app.UseRouting();
            //app.Map("/wcfservice", wcf =>
            //{
            //    wcf.Run(async context =>
            //    {
            //        await context.Response.WriteAsync("WCF Service is Running...");
            //    });
            //});


            app.Run();
        }
    }
}
