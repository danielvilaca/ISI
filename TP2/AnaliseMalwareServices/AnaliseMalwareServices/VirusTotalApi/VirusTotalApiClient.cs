using RestSharp;
using VirusTotalNet;
using VirusTotalNet.Results;

namespace AnaliseMalwareServices.VirusTotalApi
{
    /// <summary>  
    /// Client for interacting with the VirusTotal API.  
    /// </summary>  
    public class VirusTotalApiClient
    {
        private readonly string _apiKey;
        private readonly RestClient _client;

        public VirusTotalApiClient(string apiKey)
        {
            _apiKey = apiKey;
            var options = new RestClientOptions("https://www.virustotal.com/api/v3");
            _client = new RestClient(options);
        }

        // Upload a file to VirusTotal for scanning
        public async Task<string> UploadFileAsync(byte[] fileData, string fileName)
        {
            var tempFilePath = Path.Combine(Path.GetTempPath(), fileName);
            await File.WriteAllBytesAsync(tempFilePath, fileData);

            var request = new RestRequest("files", Method.Post);
            request.AddHeader("x-apikey", _apiKey);
            request.AddFile("file", tempFilePath);

            var response = await _client.ExecuteAsync(request);

            File.Delete(tempFilePath);
            return response.Content;
        }

        // Method for getting full report using analysis ID
        public async Task<string> GetFullReportAsync(string analysisId)
        {
            var request = new RestRequest($"analyses/{analysisId}", Method.Get);
            request.AddHeader("x-apikey", _apiKey);

            var response = await _client.ExecuteAsync(request);
            return response.Content;
        }


        // Method for checking file hash
        public async Task<string> CheckFileHashAsync(string fileHash)
        {
            var request = new RestRequest($"files/{fileHash}", Method.Get);
            request.AddHeader("x-apikey", _apiKey);

            var response = await _client.ExecuteAsync(request);

            if (response.IsSuccessful)
            {
                return response.Content;  // Returning the detailed scan result (JSON)
            }
            else
            {
                return $"Error: {response.StatusCode} - {response.Content}";
            }
        }

    }
}
