using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using AnaliseMalwareServices.Models;
using AnaliseMalwareServices.Data;
using AnaliseMalwareServices.VirusTotalApi;
using Newtonsoft.Json.Linq;
using Microsoft.EntityFrameworkCore;
using AnaliseMalwareServices.Auth;
using File = AnaliseMalwareServices.Models.File;
using BCrypt.Net;

namespace AnaliseMalwareServices.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class FileController : ControllerBase
    {
        private readonly VirusTotalApiClient _virusTotalApiClient;
        private readonly ApiContext _context;
        private readonly JwtService _jwtService;

        // Construtor
        public FileController(VirusTotalApiClient virusTotalApiClient, ApiContext context, JwtService jwtService)
        {
            _virusTotalApiClient = virusTotalApiClient;
            _context = context;
            _jwtService = jwtService;
        }


        // Login JWT
        [HttpPost("login")]
        public IActionResult Login([FromBody] UserLogin model)
        {
            // BD
            var user = _context.Users.SingleOrDefault(u => u.Username == model.Username);

            if (user == null || !VerifyPassword(model.Password, user.PasswordHash))
            {
                return Unauthorized("Login Inválido");
            }

            // Token
            var token = _jwtService.GenerateToken(user);

            return Ok(new { Token = token });
        }


        // File Upload to VirusTotal API
        [HttpPost("scan")]
        public async Task<IActionResult> ScanFile(IFormFile file)
        {
            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded.");

            using (var memoryStream = new MemoryStream())
            {
                await file.CopyToAsync(memoryStream);
                var fileData = memoryStream.ToArray();

                var scanResult = await _virusTotalApiClient.UploadFileAsync(fileData, file.FileName);
                return Ok(scanResult);
            }
        }

        // Endpoint full analysis report by analysis ID
        [HttpGet("report/{analysisId}")]
        public async Task<IActionResult> GetReport(string analysisId)
        {
            try
            {
                var report = await _virusTotalApiClient.GetFullReportAsync(analysisId);
                return Ok(report);
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        private string ExtractAnalysisId(string scanResult)
        {
            // scanResult JSON string that contains the "id"
            var jsonResponse = JObject.Parse(scanResult);
            return jsonResponse["data"]?["id"]?.ToString();
        }

        // Endpoint for scanning a file hash
        [HttpGet("scanHash/{fileHash}")]
        public async Task<IActionResult> ScanFileHash(string fileHash)
        {
            if (string.IsNullOrEmpty(fileHash))
            {
                return BadRequest("File hash is required.");
            }

            var scanResult = await _virusTotalApiClient.CheckFileHashAsync(fileHash);

            if (scanResult.Contains("Error"))
            {
                return BadRequest(scanResult);
            }

            return Ok(scanResult);
        }

        // VerificarPass
        private bool VerifyPassword(string enteredPassword, string storedPasswordHash)
        {
            // Teste
            return BCrypt.Net.BCrypt.Verify(enteredPassword, storedPasswordHash);
        }
    }
}
