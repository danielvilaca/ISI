using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using AnaliseMalwareServices.Models;
using AnaliseMalwareServices.Data;
using AnaliseMalwareServices.VirusTotalApi;
using Newtonsoft.Json.Linq;
using Microsoft.EntityFrameworkCore;
using File = AnaliseMalwareServices.Models.File;

namespace AnaliseMalwareServices.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class FileController : ControllerBase
    {
        private readonly VirusTotalApiClient _virusTotalApiClient;

        public FileController(VirusTotalApiClient virusTotalApiClient)
        {
            _virusTotalApiClient = virusTotalApiClient;
        }

        // File Upload to VirusTotal API
        [HttpPost("scan")]
        public async Task<IActionResult> ScanFile(IFormFile file)
        {
            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded.");

            using (var memoryStream = new MemoryStream())
            {
                await file.CopyToAsync(memoryStream);
                var fileData = memoryStream.ToArray();

                // Call the VirusTotal API to upload the file for scanning
                var scanResult = await _virusTotalApiClient.UploadFileAsync(fileData, file.FileName);


                // Return the response from VirusTotal
                return Ok(scanResult);
            }
        }



        // Endpoint to get the full analysis report by analysis ID
        [HttpGet("report/{analysisId}")]
        public async Task<IActionResult> GetReport(string analysisId)
        {
            try
            {
                // Get the full report using the analysis ID
                var report = await _virusTotalApiClient.GetFullReportAsync(analysisId);

                // Return the full report
                return Ok(report);
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }


        private string ExtractAnalysisId(string scanResult)
        {
            // Assuming scanResult is a JSON string that contains the "id" field
            var jsonResponse = JObject.Parse(scanResult);
            return jsonResponse["data"]?["id"]?.ToString();
        }


        // Endpoint for scanning a file hash (e.g., MD5, SHA256)
        [HttpGet("scanHash/{fileHash}")]
        public async Task<IActionResult> ScanFileHash(string fileHash)
        {
            if (string.IsNullOrEmpty(fileHash))
            {
                return BadRequest("File hash is required.");
            }

            // Use the VirusTotalApiClient to get the scan report for the file hash
            var scanResult = await _virusTotalApiClient.CheckFileHashAsync(fileHash);

            // If scan result contains an error, return it as a bad request
            if (scanResult.Contains("Error"))
            {
                return BadRequest(scanResult);
            }

            // Return the successful result (the scan report in JSON format)
            return Ok(scanResult);
        }


    }
}
