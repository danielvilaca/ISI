using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using AnaliseMalware.Data;
using AnaliseMalware.Models;

namespace AnaliseMalware.Controllers
{
    public class UrlAnalysisMalwareController : Controller
    {
        private readonly ApplicationDbContext _context;

        public UrlAnalysisMalwareController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: UrlAnalysisMalware
        public async Task<IActionResult> Index()
        {
            var applicationDbContext = _context.UrlAnalysisMalware.Include(u => u.UrlAnalysis);
            return View(await applicationDbContext.ToListAsync());
        }

        // GET: UrlAnalysisMalware/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var urlAnalysisMalware = await _context.UrlAnalysisMalware
                .Include(u => u.UrlAnalysis)
                .FirstOrDefaultAsync(m => m.UrlAnalysisMalwareID == id);
            if (urlAnalysisMalware == null)
            {
                return NotFound();
            }

            return View(urlAnalysisMalware);
        }

        // GET: UrlAnalysisMalware/Create
        public IActionResult Create()
        {
            ViewData["UrlAnalysisID"] = new SelectList(_context.UrlAnalysis, "UrlAnalysisId", "UrlAnalysisId");
            return View();
        }

        // POST: UrlAnalysisMalware/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("UrlAnalysisMalwareID,UrlAnalysisID,SignatureID")] UrlAnalysisMalware urlAnalysisMalware)
        {
            if (ModelState.IsValid)
            {
                _context.Add(urlAnalysisMalware);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["UrlAnalysisID"] = new SelectList(_context.UrlAnalysis, "UrlAnalysisId", "UrlAnalysisId", urlAnalysisMalware.UrlAnalysisID);
            return View(urlAnalysisMalware);
        }

        // GET: UrlAnalysisMalware/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var urlAnalysisMalware = await _context.UrlAnalysisMalware.FindAsync(id);
            if (urlAnalysisMalware == null)
            {
                return NotFound();
            }
            ViewData["UrlAnalysisID"] = new SelectList(_context.UrlAnalysis, "UrlAnalysisId", "UrlAnalysisId", urlAnalysisMalware.UrlAnalysisID);
            return View(urlAnalysisMalware);
        }

        // POST: UrlAnalysisMalware/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("UrlAnalysisMalwareID,UrlAnalysisID,SignatureID")] UrlAnalysisMalware urlAnalysisMalware)
        {
            if (id != urlAnalysisMalware.UrlAnalysisMalwareID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(urlAnalysisMalware);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!UrlAnalysisMalwareExists(urlAnalysisMalware.UrlAnalysisMalwareID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["UrlAnalysisID"] = new SelectList(_context.UrlAnalysis, "UrlAnalysisId", "UrlAnalysisId", urlAnalysisMalware.UrlAnalysisID);
            return View(urlAnalysisMalware);
        }

        // GET: UrlAnalysisMalware/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var urlAnalysisMalware = await _context.UrlAnalysisMalware
                .Include(u => u.UrlAnalysis)
                .FirstOrDefaultAsync(m => m.UrlAnalysisMalwareID == id);
            if (urlAnalysisMalware == null)
            {
                return NotFound();
            }

            return View(urlAnalysisMalware);
        }

        // POST: UrlAnalysisMalware/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var urlAnalysisMalware = await _context.UrlAnalysisMalware.FindAsync(id);
            if (urlAnalysisMalware != null)
            {
                _context.UrlAnalysisMalware.Remove(urlAnalysisMalware);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool UrlAnalysisMalwareExists(int id)
        {
            return _context.UrlAnalysisMalware.Any(e => e.UrlAnalysisMalwareID == id);
        }
    }
}
