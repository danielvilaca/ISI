using AnaliseMalwareApp.Services;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using AnaliseMalwareApp.Models;

namespace AnaliseMalwareApp.Controllers
{
    public class FileScanController : Controller
    {
        private readonly FileScanService _fileScanService;

        public FileScanController(FileScanService fileScanService)
        {
            _fileScanService = fileScanService;
        }

        [HttpGet]
        public IActionResult UploadFile()
        {
            return View(new FileScanViewModel());
        }

        [HttpPost]
        public async Task<IActionResult> UploadFile(IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                ModelState.AddModelError("", "Please select a valid file.");
                return View(new FileScanViewModel());
            }

            using (var content = new MultipartFormDataContent())
            {
                var fileContent = new StreamContent(file.OpenReadStream());
                content.Add(fileContent, "file", file.FileName);

                using var httpClient = new HttpClient();
                var response = await httpClient.PostAsync("https://analisemalwareservices-bxhrh2agbsaaf9gt.spaincentral-01.azurewebsites.net/api/File/scan", content);
                var responseMessage = await response.Content.ReadAsStringAsync();

                // Response message to the view
                var viewModel = new FileScanViewModel
                {
                    ResponseMessage = responseMessage
                };

                return View(viewModel);
            }
        }

        // Report by Analysis ID
        [HttpGet]
        public IActionResult GetReport()
        {
            return View(new FileScanViewModel());
        }

        [HttpPost]
        public async Task<IActionResult> GetReport(FileScanViewModel model)
        {
            if (string.IsNullOrWhiteSpace(model.AnalysisId))
            {
                ModelState.AddModelError("", "Please enter a valid Analysis ID.");
                return View(new FileScanViewModel());
            }

            var response = await _fileScanService.GetReportAsync(model.AnalysisId);

            var viewModel = new FileScanViewModel
            {
                ResponseMessage = response
            };

            return View(viewModel);
        }

        // Scan by File Hash
        [HttpGet]
        public IActionResult ScanByHash()
        {
            return View(new FileScanViewModel());
        }

        [HttpPost]
        public async Task<IActionResult> ScanByHash(FileScanViewModel model)
        {
            if (string.IsNullOrWhiteSpace(model.FileHash))
            {
                ModelState.AddModelError("", "Please enter a valid file hash.");
                return View(new FileScanViewModel());
            }

            var response = await _fileScanService.ScanByHashAsync(model.FileHash);

            var viewModel = new FileScanViewModel
            {
                ResponseMessage = response
            };

            return View(viewModel);
        }
    }
}
